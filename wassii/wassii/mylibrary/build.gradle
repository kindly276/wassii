apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.mcxiaoke.volley:library:1.0.19'
}
//android.libraryVariants.all { variant ->
//    task("generate${variant.name}Javadoc", type: Javadoc) {
//        description "Generates Javadoc for $variant.name."
//        source = variant.javaCompile.source
//        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
//        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
//    }
//
//    task("javadoc${variant.name}", type: Jar) {
//        classifier = "javadoc"
//        description "Bundles Javadoc into a JAR file for $variant.name."
//        from tasks["generate${variant.name}Javadoc"]
//
//    }
//
//    task("jar${variant.name}", type: Jar) {
//        description "Bundles compiled .class files into a JAR file for $variant.name."
//        dependsOn variant.javaCompile
//        from variant.javaCompile.destinationDir
//        exclude '**/R.class', '**/R$*.class', '**/R.html', '**/R.*.html'
//    }
//}
// Task to delete old jar
task deleteOldJar(type: Delete){
    delete 'release/AndroidPlugin2.jar'
}
// task to export contents as jar
task exportJar(type: Copy) {
    from ('build/intermediates/bundles/release/')
    into ('release/')
    include ('classes.jar')
    rename('classes.jar', 'AndroidPlugin2.jar')
}
exportJar.dependsOn(deleteOldJar, build)